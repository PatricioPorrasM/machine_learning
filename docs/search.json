[
  {
    "objectID": "kmeans.html",
    "href": "kmeans.html",
    "title": "Kmeans",
    "section": "",
    "text": "print(\"Importar librerías\")\n\nimport altair as alt\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, LabelEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import silhouette_score\n\nImportar librerías\n\n\n\n\n\n\nprint(\"cargar dataset\")\n\nurl = \"https://raw.githubusercontent.com/erickedu85/dataset/master/age_income.csv\"\ndf = pd.read_csv(url)\ndf\n\ncargar dataset\n\n\n\n\n\n\n\n\n\nage\nannual_income($)\n\n\n\n\n0\n17\n17123\n\n\n1\n17\n18375\n\n\n2\n16\n18557\n\n\n3\n23\n17721\n\n\n4\n22\n17291\n\n\n...\n...\n...\n\n\n145\n66\n21653\n\n\n146\n75\n20631\n\n\n147\n74\n20572\n\n\n148\n69\n21452\n\n\n149\n73\n20754\n\n\n\n\n150 rows × 2 columns\n\n\n\n\n\n\n\nprint(\"Visualizar datos\")\n\nalt.Chart(df).mark_circle().encode(\n    alt.X('age'),\n    alt.Y('annual_income($)'),\n    tooltip=['age', 'annual_income($)']\n).interactive()\n\nVisualizar datos",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#importar-librerías",
    "href": "kmeans.html#importar-librerías",
    "title": "Kmeans",
    "section": "",
    "text": "print(\"Importar librerías\")\n\nimport altair as alt\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, LabelEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import silhouette_score\n\nImportar librerías",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#cargar-dataset",
    "href": "kmeans.html#cargar-dataset",
    "title": "Kmeans",
    "section": "",
    "text": "print(\"cargar dataset\")\n\nurl = \"https://raw.githubusercontent.com/erickedu85/dataset/master/age_income.csv\"\ndf = pd.read_csv(url)\ndf\n\ncargar dataset\n\n\n\n\n\n\n\n\n\nage\nannual_income($)\n\n\n\n\n0\n17\n17123\n\n\n1\n17\n18375\n\n\n2\n16\n18557\n\n\n3\n23\n17721\n\n\n4\n22\n17291\n\n\n...\n...\n...\n\n\n145\n66\n21653\n\n\n146\n75\n20631\n\n\n147\n74\n20572\n\n\n148\n69\n21452\n\n\n149\n73\n20754\n\n\n\n\n150 rows × 2 columns",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#visualizar-datos",
    "href": "kmeans.html#visualizar-datos",
    "title": "Kmeans",
    "section": "",
    "text": "print(\"Visualizar datos\")\n\nalt.Chart(df).mark_circle().encode(\n    alt.X('age'),\n    alt.Y('annual_income($)'),\n    tooltip=['age', 'annual_income($)']\n).interactive()\n\nVisualizar datos",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#visualizar-el-sse-vs-k_range",
    "href": "kmeans.html#visualizar-el-sse-vs-k_range",
    "title": "Kmeans",
    "section": "Visualizar el SSE vs K_range",
    "text": "Visualizar el SSE vs K_range\n\nprint(\"Visualizar el SSE vs K_range\")\n\nelbow_df =  pd.DataFrame(\n    {\n        'K':k_range,\n        'SSE':sse\n    }\n)\n\nalt.Chart(elbow_df).mark_line().encode(\n    alt.X('K'),\n    alt.Y('SSE'),\n    tooltip=['K', 'SSE']\n).properties(\n    title=\"Método del codo (Elbow)\"\n).interactive()\n\nVisualizar el SSE vs K_range",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#clusterización",
    "href": "kmeans.html#clusterización",
    "title": "Kmeans",
    "section": "Clusterización",
    "text": "Clusterización\n\nprint(\"Clusterización\")\n\nk_clusters = 3\nclusters = KMeans(n_clusters=k_clusters, random_state=42)\ndf['clusters'] = clusters.fit_predict(df[['age', 'annual_income($)']])\ndf\n\nClusterización\n\n\n\n\n\n\n\n\n\nage\nannual_income($)\nclusters\n\n\n\n\n0\n17\n17123\n2\n\n\n1\n17\n18375\n2\n\n\n2\n16\n18557\n2\n\n\n3\n23\n17721\n2\n\n\n4\n22\n17291\n2\n\n\n...\n...\n...\n...\n\n\n145\n66\n21653\n0\n\n\n146\n75\n20631\n0\n\n\n147\n74\n20572\n0\n\n\n148\n69\n21452\n0\n\n\n149\n73\n20754\n0\n\n\n\n\n150 rows × 3 columns",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#visualizar-clusters",
    "href": "kmeans.html#visualizar-clusters",
    "title": "Kmeans",
    "section": "Visualizar clusters",
    "text": "Visualizar clusters\n\nprint(\"Visualizar clusters\")\n\nalt.Chart(df).mark_circle().encode(\n    alt.X('age'),\n    alt.Y('annual_income($)'),\n    alt.Color('clusters:N'),\n    tooltip=['age', 'annual_income($)', 'clusters:N']\n).properties(\n    title=\"Clusters\"\n).interactive()\n\nVisualizar clusters",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#columntransformer",
    "href": "kmeans.html#columntransformer",
    "title": "Kmeans",
    "section": "ColumnTransformer",
    "text": "ColumnTransformer\n\nprint(\"ColumnTransformer\")\n\nnum_cols = ['age', 'annual_income($)']\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('StandardScaler', StandardScaler(), num_cols)\n    ]\n)\n\nColumnTransformer",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#pipeline",
    "href": "kmeans.html#pipeline",
    "title": "Kmeans",
    "section": "Pipeline",
    "text": "Pipeline\n\nprint(\"Pipeline\")\n\npipeline = Pipeline(\n    [\n        ('Preprocessor', preprocessor),\n        ('KMeans', KMeans(random_state=42))\n    ]\n)\n\nPipeline",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#modelo-elbow",
    "href": "kmeans.html#modelo-elbow",
    "title": "Kmeans",
    "section": "Modelo Elbow",
    "text": "Modelo Elbow\n\nprint(\"Modelo Elbow\")\n\nk_range = range(2, 11) # valores posibles de k\nsse_standar = [] #inercia\nsilhouette_scores = []\n\nfor k in k_range:\n    pipeline.set_params(KMeans__n_clusters=k)\n    pipeline.fit(df[num_cols])\n    sse_standar.append(pipeline.named_steps['KMeans'].inertia_)\n    pred = pipeline.predict(df[num_cols])\n    score = silhouette_score(\n        pipeline.named_steps['Preprocessor'].transform(df[num_cols]),\n        pred\n    )\n    print(\"k: \", k)\n    print(\"Score: \", score)\n    print(\"Pred:\", pred)\n    \n    silhouette_scores.append(score)\n\n# print(\"Inercia: \\n\", sse_standar)\n\nModelo Elbow\nk:  2\nScore:  0.5584253334367935\nPred: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1]\nk:  3\nScore:  0.48862751188830505\nPred: [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1]\nk:  4\nScore:  0.6197880502586566\nPred: [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1\n 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n 3 3]\nk:  5\nScore:  0.5870741352565944\nPred: [2 2 2 2 2 4 2 4 2 2 2 2 2 4 4 4 2 4 2 4 2 2 2 4 4 4 4 2 2 4 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1\n 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n 3 3]\nk:  6\nScore:  0.5496403913716197\nPred: [2 2 2 2 2 4 2 4 2 2 2 2 2 4 4 4 2 4 2 4 2 2 2 4 4 4 4 2 2 4 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 5 5 5 5 5 5 5 5 5 5 5 1 5\n 5 5 5 1 5 1 1 5 5 5 5 5 5 5 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n 3 3]\nk:  7\nScore:  0.5351154400530848\nPred: [2 2 2 2 2 4 2 4 2 2 2 2 2 4 4 4 2 4 2 4 2 2 2 4 4 4 4 2 2 4 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 5 6 6 6 5 6 6 5 6 5 6 1 5\n 6 6 5 5 5 5 5 6 5 6 6 6 6 6 6 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n 3 3]\nk:  8\nScore:  0.49714020005833676\nPred: [3 3 3 3 3 6 3 6 6 3 3 3 3 6 6 6 3 6 3 6 3 3 3 6 6 6 6 3 3 6 4 4 0 4 0 4 0\n 4 4 0 0 0 4 0 0 0 0 0 4 4 4 4 0 4 0 0 0 4 4 4 5 5 7 7 7 5 5 5 5 5 5 5 1 5\n 7 5 5 5 5 5 5 7 5 7 5 5 7 5 7 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n 2 2]\nk:  9\nScore:  0.48277202641477185\nPred: [3 3 3 3 3 6 3 6 6 3 3 3 3 6 6 6 3 6 3 6 3 3 3 6 6 6 6 3 3 6 4 4 0 4 0 4 0\n 4 4 0 0 0 4 0 0 0 0 0 4 4 4 4 0 4 0 0 0 4 4 4 8 5 7 7 7 8 5 5 8 5 5 5 8 8\n 7 5 8 8 5 8 8 7 8 7 5 5 7 5 7 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n 2 2]\nk:  10\nScore:  0.4911492763637339\nPred: [3 3 3 3 3 6 3 6 6 3 3 3 3 6 6 6 3 6 3 6 3 3 3 6 6 6 6 3 3 6 4 4 0 4 0 4 0\n 4 4 0 0 0 4 0 0 0 4 0 4 4 4 4 0 4 0 0 0 4 4 4 9 9 7 7 5 9 5 5 9 5 9 5 8 9\n 5 5 9 8 5 9 9 7 9 5 5 5 7 5 7 5 1 8 8 8 1 1 8 1 8 8 8 8 1 8 1 8 1 8 8 1 1\n 8 8 8 8 8 1 8 8 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n 2 2]",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#visualización-del-mpetd-del-cododo-y-silhouette",
    "href": "kmeans.html#visualización-del-mpetd-del-cododo-y-silhouette",
    "title": "Kmeans",
    "section": "Visualización del mpetd del cododo y Silhouette",
    "text": "Visualización del mpetd del cododo y Silhouette\n\nprint(\"Visualización del mpetd del cododo y Silhouette\")\n\nsse_stabdar_df =  pd.DataFrame(\n    {\n        'K':k_range,\n        'SSE_STANDAR':sse_standar,\n    }\n)\n\nsilhouette_df =  pd.DataFrame(\n    {\n        'K':k_range,\n        'Silhouette':silhouette_scores\n    }\n)\n\nviz_sse_estandar = alt.Chart(sse_stabdar_df).mark_line().encode(\n    alt.X('K'),\n    alt.Y('SSE_STANDAR'),\n    tooltip=['K', 'SSE_STANDAR']\n).properties(\n    title=\"Método del codo con Pipeline + Estandarización\"\n).interactive()\n\nviz_silhouette = alt.Chart(silhouette_df).mark_line().encode(\n    alt.X('K'),\n    alt.Y('Silhouette'),\n    tooltip=['K', 'Silhouette']\n).properties(\n    title=\"Silhouette Score con Pipeline + Estandarización\"\n).interactive()\n\nviz_sse_estandar | viz_silhouette\n\nVisualización del mpetd del cododo y Silhouette",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#custerización-con-pipeline-standarscale",
    "href": "kmeans.html#custerización-con-pipeline-standarscale",
    "title": "Kmeans",
    "section": "Custerización con Pipeline + StandarScale()",
    "text": "Custerización con Pipeline + StandarScale()\n\nprint(\"Clusterización con Pipeline + StandarScale()\")\n\nk_optimo = k_range[silhouette_scores.index(max(silhouette_scores))]\nprint(\"K óptimo: \", k_optimo)\n\npipeline.set_params(KMeans__n_clusters=k_optimo)\ndf['clusters_standar'] = pipeline.fit_predict(df[num_cols])\ndf\n\nClusterización con Pipeline + StandarScale()\nK óptimo:  4\n\n\n\n\n\n\n\n\n\nage\nannual_income($)\nclusters\nclusters_standar\n\n\n\n\n0\n17\n17123\n2\n2\n\n\n1\n17\n18375\n2\n2\n\n\n2\n16\n18557\n2\n2\n\n\n3\n23\n17721\n2\n2\n\n\n4\n22\n17291\n2\n2\n\n\n...\n...\n...\n...\n...\n\n\n145\n66\n21653\n0\n3\n\n\n146\n75\n20631\n0\n3\n\n\n147\n74\n20572\n0\n3\n\n\n148\n69\n21452\n0\n3\n\n\n149\n73\n20754\n0\n3\n\n\n\n\n150 rows × 4 columns",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#visualización-clusters",
    "href": "kmeans.html#visualización-clusters",
    "title": "Kmeans",
    "section": "Visualización clusters",
    "text": "Visualización clusters\n\nprint(\"Visualización clusters\")\n\nalt.Chart(df).mark_circle().encode(\n    alt.X('age'),\n    alt.Y('annual_income($)'),\n    alt.Color('clusters_standar:N'),\n    tooltip=['age', 'annual_income($)', 'clusters_standar:N']\n).properties(\n    title=\"Clusters\"\n).interactive()\n\nVisualización clusters",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#visualización-del-método-del-cododo-y-silhouette",
    "href": "kmeans.html#visualización-del-método-del-cododo-y-silhouette",
    "title": "Kmeans",
    "section": "Visualización del método del cododo y Silhouette",
    "text": "Visualización del método del cododo y Silhouette\n\nprint(\"Visualización del método del cododo y Silhouette\")\n\nsse_stabdar_df =  pd.DataFrame(\n    {\n        'K':k_range,\n        'SSE_STANDAR':sse_standar,\n    }\n)\n\nsilhouette_df =  pd.DataFrame(\n    {\n        'K':k_range,\n        'Silhouette':silhouette_scores\n    }\n)\n\nviz_sse_estandar = alt.Chart(sse_stabdar_df).mark_line().encode(\n    alt.X('K'),\n    alt.Y('SSE_STANDAR'),\n    tooltip=['K', 'SSE_STANDAR']\n).properties(\n    title=\"Método del codo con Pipeline + Estandarización\"\n).interactive()\n\nviz_silhouette = alt.Chart(silhouette_df).mark_line().encode(\n    alt.X('K'),\n    alt.Y('Silhouette'),\n    tooltip=['K', 'Silhouette']\n).properties(\n    title=\"Silhouette Score con Pipeline + Estandarización\"\n).interactive()\n\nviz_sse_estandar | viz_silhouette\n\nVisualización del método del cododo y Silhouette\n\n\n\n\n\n\nVisualización del método del cododo y Silhouette",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#visualización-del-método-del-codo-y-silhouette",
    "href": "kmeans.html#visualización-del-método-del-codo-y-silhouette",
    "title": "Kmeans",
    "section": "Visualización del método del codo y Silhouette",
    "text": "Visualización del método del codo y Silhouette\n\nprint(\"Visualización del método del codo y Silhouette\")\n\nsse_stabdar_df =  pd.DataFrame(\n    {\n        'K':k_range,\n        'SSE_STANDAR':sse_standar,\n    }\n)\n\nsilhouette_df =  pd.DataFrame(\n    {\n        'K':k_range,\n        'Silhouette':silhouette_scores\n    }\n)\n\nviz_sse_estandar = alt.Chart(sse_stabdar_df).mark_line().encode(\n    alt.X('K'),\n    alt.Y('SSE_STANDAR'),\n    tooltip=['K', 'SSE_STANDAR']\n).properties(\n    title=\"Método del codo con Pipeline + Estandarización\"\n).interactive()\n\nviz_silhouette = alt.Chart(silhouette_df).mark_line().encode(\n    alt.X('K'),\n    alt.Y('Silhouette'),\n    tooltip=['K', 'Silhouette']\n).properties(\n    title=\"Silhouette Score con Pipeline + Estandarización\"\n).interactive()\n\nviz_sse_estandar | viz_silhouette\n\nVisualización del método del codo y Silhouette\n\n\n\n\n\n\nVisualización del método del cododo y Silhouette",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#visualización-clusters-estándar",
    "href": "kmeans.html#visualización-clusters-estándar",
    "title": "Kmeans",
    "section": "Visualización clusters estándar",
    "text": "Visualización clusters estándar\n\nprint(\"Visualización clusters estándar\")\n\nalt.Chart(df).mark_circle().encode(\n    alt.X('age'),\n    alt.Y('annual_income($)'),\n    alt.Color('clusters_standar:N'),\n    tooltip=['age', 'annual_income($)', 'clusters_standar:N']\n).properties(\n    title=\"Clusters\"\n).interactive()\n\nVisualización clusters estándar\n\n\n\n\n\n\nVisualización clusters estándar",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#clusterización-con-k3",
    "href": "kmeans.html#clusterización-con-k3",
    "title": "Kmeans",
    "section": "Clusterización con k=3",
    "text": "Clusterización con k=3\n\nprint(\"Clusterización con k=3\")\n\nk_clusters = 3\nclusters = KMeans(n_clusters=k_clusters, random_state=42)\ndf['clusters'] = clusters.fit_predict(df[['age', 'annual_income($)']])\ndf\n\nClusterización con k=3\n\n\n\n\n\n\n\n\n\nage\nannual_income($)\nclusters\n\n\n\n\n0\n17\n17123\n2\n\n\n1\n17\n18375\n2\n\n\n2\n16\n18557\n2\n\n\n3\n23\n17721\n2\n\n\n4\n22\n17291\n2\n\n\n...\n...\n...\n...\n\n\n145\n66\n21653\n0\n\n\n146\n75\n20631\n0\n\n\n147\n74\n20572\n0\n\n\n148\n69\n21452\n0\n\n\n149\n73\n20754\n0\n\n\n\n\n150 rows × 3 columns",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  },
  {
    "objectID": "kmeans.html#visualizar-clusters-k3",
    "href": "kmeans.html#visualizar-clusters-k3",
    "title": "Kmeans",
    "section": "Visualizar clusters K=3",
    "text": "Visualizar clusters K=3\n\nprint(\"Visualizar clusters k=3\")\n\nalt.Chart(df).mark_circle().encode(\n    alt.X('age'),\n    alt.Y('annual_income($)'),\n    alt.Color('clusters:N'),\n    tooltip=['age', 'annual_income($)', 'clusters:N']\n).properties(\n    title=\"Clusters\"\n).interactive()\n\nVisualizar clusters k=3",
    "crumbs": [
      "Clustering",
      "Kmeans"
    ]
  }
]